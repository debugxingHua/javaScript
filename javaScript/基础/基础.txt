JavaScript 是脚本语言
JavaScript 是一种轻量级的编程语言。
JavaScript 是可插入 HTML 页面的编程代码。
JavaScript 插入 HTML 页面后，可由所有的现代浏览器执行。

JavaScript 的核心 ECMAScript 描述了该语言的语法和基本对象；
DOM 描述了处理网页内容的方法和接口；
BOM 描述了与浏览器进行交互的方法和接口。

注释
    单行注释以 // 开头。多行注释以 /* 开始，以 */ 结尾。
变量
    变量可以使用短名称（比如 x 和 y），也可以使用描述性更好的名称（比如 age, sum, totalvolume）。
    变量必须以字母开头
    变量也能以 $ 和 _ 符号开头（不过我们不推荐这么做）
    变量名称对大小写敏感（y 和 Y 是不同的变量）
    提示：JavaScript 语句和 JavaScript 变量都对大小写敏感。

JavaScript 数据类型
    字符串、数字、布尔、数组、对象、Null、Undefined

JavaScript 对象
    JavaScript 中的所有事物都是对象：字符串、数字、数组、日期，等等。对象是拥有属性和方法的数据。
    创建对象可以用new+构造，也可以用字面量;
    访问对象属性的语法是：objectName.propertyName

JavaScript 函数
    函数是由事件驱动的或者当它被调用时执行的可重复使用的代码块。
区分大小写
    与 Java 一样，变量、函数名、运算符以及其他一切东西都是区分大小写的。
    比如：变量 test 与变量 TEST 是不同的。
变量是弱类型的
    与 Java 和 C 不同，ECMAScript 中的变量无特定的类型，定义变量时只用 var 运算符，可以将它初始化为任意值。
不用声明，不过这样不安全

关键字：
    break、case、catch、continue、default、delete、do、else、for、function、if、in、instanceof、new、return、switch
    this、throw、try、typeof、var、void、while、with
    如果把关键字用作变量名或函数名，可能得到诸如 "Identifier Expected"（应该有标识符、期望标识符）这样的错误消息。
保留字
    abstract、boolean、byte、char、class、const、debugger、
    double、enum、export、extends、final、float、goto、implements、import
    int、interface、long、native、package、private、protected、public、short、static
    super、synchronized、throws、transient、volatile
    保留字在某种意思上是为将来的关键字而保留的单词。因此保留字不能被用作变量名或函数名。
    如果将保留字用作变量名或函数名，那么除非将来的浏览器实现了该保留字，否则很可能收不到任何错误消息。
    当浏览器将其实现后，该单词将被看做关键字，如此将出现关键字错误。

变量可以存在两种类型的值，即原始值和引用值。
    原始值
        存储在栈（stack）中的简单数据段，也就是说，它们的值直接存储在变量访问的位置。
    引用值
        存储在堆（heap）中的对象，也就是说，存储在变量处的值是一个指针（point），指向存储对象的内存处。
     5 种原始类型（primitive type），即 Undefined、Null、Boolean、Number 和 String

JavaScript 运算符
    JavaScript 算术运算符
    算术运算符用于执行变量与/或值之间的算术运算。
    一元运算符
        delete          一元运算符只有一个参数，即要操作的对象或值。它们是 ECMAScript 中最简单的运算符。
        void            void 运算符对任何值返回 undefined。该运算符通常用于避免输出不应该输出的值
                        例如，从 HTML 的 <a> 元素调用 JavaScript 函数时。要正确做到这一点，函数不能返回有效值，
                        否则浏览器将清空页面，只显示函数的结果。
                        例如：<a href="javascript:window.open('about:blank')">Click me</a>
    前增量/前减量运算符
        前增量运算符，就是数值上加 1，形式是在变量前放两个加号（++）：      ++iNum;
        前减量运算符是从数值上减 1，形式是在变量前放两个减号（--）：        --iNum;
    后增量/后减量运算符
        后增量运算符也是给数值上加 1，形式是在变量后放两个加号（++）：      iNum++;
        后减量运算符也是从数值上减 1，形式为在变量后加两个减号（--）：      iNum--;
    位运算 NOT AND OR XOR  左移运算 有符号右移运算 无符号右移运算
    Boolean 运算符有三种：NOT、AND 和 OR。
    乘法运算符由星号（*）表示，用于两数相乘
    除法运算符由斜杠（/）表示，用第二个运算数除第一个运算数
    取模（余数）运算符由百分号（%）表示
    加法运算符由加号（+）表示
    减法运算符（-），也是一个常用的运算符
    关系运算符小于、大于、小于等于和大于等于执行的是两个数的比较运算，比较方式与算术比较运算相同
    等性运算符：等号和非等号用于处理原始值，全等号和非全等号用于处理对象。
    条件运算符：三目运算
    赋值运算符由等号（=）实现，只是把等号右边的值赋予等号左边的变量
    复合赋值运算是由乘性运算符、加性运算符或位移运算符加等号（=）实现的。
    逗号运算符可以在一条语句中执行多个运算；

    给定 y=5，下面的表格解释了这些算术运算符：
    运算符	描述	例子	结果
    +	加	x=y+2	x=7
    -	减	x=y-2	x=3
    *	乘	x=y*2	x=10
    /	除	x=y/2	x=2.5
    %	求余数 (保留整数)	x=y%2	x=1
    ++	累加	x=++y	x=6
    --	递减	x=--y	x=4
    JavaScript 赋值运算符
    赋值运算符用于给 JavaScript 变量赋值。
    给定 x=10 和 y=5，下面的表格解释了赋值运算符：
    运算符	例子	等价于	结果
    =	x=y	 	x=5
    +=	x+=y	x=x+y	x=15
    -=	x-=y	x=x-y	x=5
    *=	x*=y	x=x*y	x=50
    /=	x/=y	x=x/y	x=2
    %=	x%=y	x=x%y	x=0
    用于字符串的 + 运算符
    + 运算符用于把文本值或字符串变量加起来（连接起来）。

JavaScript 比较和逻辑运算符
    比较和逻辑运算符用于测试 true 或 false。
    比较运算符
    比较运算符在逻辑语句中使用，以测定变量或值是否相等。
    给定 x=5，下面的表格解释了比较运算符：
    运算符	描述	例子
    ==	等于	x==8 为 false
    ===	全等（值和类型）	x===5 为 true；x==="5" 为 false
    !=	不等于	x!=8 为 true
    >	大于	x>8 为 false
    <	小于	x<8 为 true
    >=	大于或等于	x>=8 为 false
    <=	小于或等于	x<=8 为 true
    逻辑运算符
    逻辑运算符用于测定变量或值之间的逻辑。
    给定 x=6 以及 y=3，下表解释了逻辑运算符：
    运算符	描述	例子
    &&	and	(x < 10 && y > 1) 为 true
    ||	or	(x==5 || y==5) 为 false
    !	not	!(x==y) 为 true
    条件运算符
    JavaScript 还包含了基于某些条件对变量进行赋值的条件运算符。
    语法
    variablename=(condition)?value1:value2

JavaScript 分支结构-条件语句
    if 语句 - 只有当指定条件为 true 时，使用该语句来执行代码
    if...else 语句 - 当条件为 true 时执行代码，当条件为 false 时执行其他代码
    if...else if....else 语句 - 使用该语句来选择多个代码块之一来执行
    switch 语句 - 使用该语句来选择多个代码块之一来执行
    for - 循环代码块一定的次数
    for/in - 循环遍历对象的属性
    while - 当指定的条件为 true 时循环指定的代码块
    do/while - 同样当指定的条件为 true 时循环指定的代码块
    break 语句用于跳出循环。break 语句（不带标签引用），只能用在循环或 switch 中。
    continue 用于跳过循环中的一个迭代。continue 语句（带有或不带标签引用）只能用在循环中。
    通过标签引用，break 语句可用于跳出任何 JavaScript 代码块:break list;
    with 语句用于设置代码在特定对象中的作用域。
JavaScript 错误 - Throw、Try 和 Catch
    try 语句测试代码块的错误。
    catch 语句处理错误。
    throw 语句创建自定义错误。

JavaScript 表单验证
    自定义验证 null、email等等;
